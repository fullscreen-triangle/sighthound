[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[project]
name = "sighthound"
version = "0.2.0"
description = "High-performance hybrid Python-Rust framework for GPS trajectory processing and geolocation data fusion"
authors = [{name = "Sighthound Team", email = "team@sighthound.dev"}]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["gps", "geolocation", "kalman-filter", "triangulation", "rust", "performance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Mathematics",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "filterpy>=1.4.5",
    "geopy>=2.2.0",
    "requests>=2.25.0",
    "tqdm>=4.60.0",
    "psutil>=5.8.0",
    "click>=8.0.0",
    "pyyaml>=5.4.0",
    "aiohttp>=3.8.0",
    "asyncio>=3.4.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0",
    "isort>=5.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
viz = [
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "folium>=0.12.0",
    "bokeh>=2.4.0",
]
parsers = [
    "gpxpy>=1.5.0",
    "fitparse>=1.2.0",
    "lxml>=4.6.0",
]
full = [
    "sighthound[dev,viz,parsers]",
]

[project.urls]
Homepage = "https://github.com/sighthound/sighthound"
Documentation = "https://docs.sighthound.dev"
Repository = "https://github.com/sighthound/sighthound.git"
Issues = "https://github.com/sighthound/sighthound/issues"

[project.scripts]
sighthound = "sighthound.cli:main"
sighthound-server = "sighthound.server:main"
sighthound-benchmark = "sighthound.benchmark:main"

[tool.maturin]
python-source = "python"
module-name = "sighthound._rust"
features = ["pyo3/extension-module"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    "integration",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]

[tool.coverage.run]
source = ["sighthound"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol\\):",
    "@(abc\\.)?abstractmethod",
] 